# generated by datamodel-codegen:
#   filename:  spec.yaml

from __future__ import annotations

from typing import Optional

from pydantic import AwareDatetime, BaseModel, Field


class User(BaseModel):
    id: str = Field(..., description='Internal primary key (numeric).')
    uuid: Optional[str] = Field(None, description='Unique public identifier (UUID).')
    full_name: Optional[str] = Field(None, description="User's full name.")
    email: Optional[str] = Field(
        None, description='Unique email address, used for login.'
    )
    phone_number: Optional[str] = Field(
        None, description='Phone number (E.164 format recommended).'
    )
    hashed_password: Optional[str] = Field(
        None, description='Hashed password (null for users via OAuth).'
    )
    google_id: Optional[str] = Field(
        None, description="User's unique Google ID (for OAuth)."
    )
    avatar_url: Optional[str] = Field(
        None, description="URL of the user's profile picture."
    )
    is_active: Optional[str] = Field(
        True, description='Indicates if the user is active in the system.'
    )
    created_at: Optional[AwareDatetime] = Field(
        None, description="Timestamp of the record's creation."
    )
    updated_at: Optional[AwareDatetime] = Field(
        None, description="Timestamp of the record's last update."
    )


class Family(BaseModel):
    id: str = Field(..., description='Internal primary key (numeric).')
    uuid: Optional[str] = Field(None, description='Unique public identifier (UUID).')
    name: Optional[str] = Field(None, description='Name of the family.')
    description: Optional[str] = Field(
        None, description='Optional description of the family.'
    )
    status: Optional[str] = Field(
        'active', description='Status of the family (e.g., active, archived).'
    )
    created_at: Optional[AwareDatetime] = Field(
        None, description="Timestamp of the record's creation."
    )
    updated_at: Optional[AwareDatetime] = Field(
        None, description="Timestamp of the record's last update."
    )


class FamilyMember(BaseModel):
    user_id: str = Field(..., description='Foreign key for the users table.')
    family_id: str = Field(..., description='Foreign key for the families table.')
    role: Optional[str] = Field(
        'member', description="User's role in the family (e.g., admin, member)."
    )
    joined_at: Optional[AwareDatetime] = Field(
        None, description='Timestamp of when the user joined the family.'
    )


class FamilyInvitation(BaseModel):
    id: str = Field(..., description='Internal primary key (numeric).')
    uuid: Optional[str] = Field(None, description='Unique public identifier (UUID).')
    family_id: Optional[str] = Field(
        None, description='ID of the family to which the invitation was sent.'
    )
    inviter_id: Optional[str] = Field(
        None, description='ID of the user who sent the invitation.'
    )
    invitee_email: Optional[str] = Field(None, description='Email of the invited user.')
    status: Optional[str] = Field(
        'pending', description='Status of the invitation (pending, accepted, declined).'
    )
    created_at: Optional[AwareDatetime] = Field(
        None, description="Timestamp of the invitation's creation."
    )
    expires_at: Optional[AwareDatetime] = Field(
        None, description="Timestamp of the invitation's expiration."
    )
